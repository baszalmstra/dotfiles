#!/usr/bin/env bash

set -e



#==============
# Functions
#==============
is_exists() {
    which "$1" >/dev/null 2>&1
    return $?
}

write_newline() {
    printf "\n"
}

write_header() {
    printf " \033[37;1m%s\033[m\n" "$*"
}

write_error() {
    printf "\r \033[31m✖ \033[37;1m%s\033[m\n" "$*"
}

write_warning() {
    printf " \033[31m%s\033[m\n" "$*"
}

write_done() {
    printf "\r \033[32m✔ \033[37;1m%s\033[m\n" "$*"
}

write_pending() {
    printf " \033[37;1m%s\033[m... " "➜ $*"
}

queue_packages() {
    missing_packages="${missing_packages+$missing_packages }$*"
}

symlink_config() {
    write_pending "symlinking $1 config"
    mkdir -p "$HOME/.config/$1"
    stow "$1"
    write_done "symlinking $1 config"
}

install_queued_packages() {
    if [ -n "$missing_packages" ]; then 
        if [ -z "$(find /var/cache/apt/pkgcache.bin -mmin -60)" ]; then
            write_pending "updating apt"
            (sudo DEBIAN_FRONTEND=noninteractive apt-get update -qq > /dev/null && write_done "updating apt") || write_error "updating apt"
        fi
        write_pending "installing packages: $missing_packages"
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq $missing_packages < /dev/null > /dev/null
        write_done "installing packages: $missing_packages"
    fi
}

webi_update_or_install() {
    write_pending "updating $1"
    curl -sS https://webinstall.dev/$1 | bash >/dev/null
    write_done "updating $1"
}

update_or_install_starship() {
    write_pending "updating starship"
    sh -c "$(curl -fsSL https://starship.rs/install.sh)" -- --force --yes >/dev/null
    write_done "updating starship"
}

install_rustup() {
    write_pending "installing rustup"
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -- -y >/dev/null
    write_done "installing rustup"
}

install_delta() {
    write_pending "installing delta"
    cargo install --force --locked git-delta >/dev/null
    write_done "installing delta"
}

#==============
# Variables
#==============
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

#=============
# Install utilities
#==============
is_exists "curl"     || queue_packages "curl"
is_exists "stow"     || queue_packages "stow"
is_exists "git-undo" || queue_packages "git-extras"
is_exists "nvim"     || queue_packages "neovim"
is_exists "bsdtar"   || queue_packages "libarchive-tools"

if [[ ! $(grep microsoft /proc/version) ]]; then
    is_exists "alacritty"|| queue_packages "alacritty"
fi

install_queued_packages

is_exists "cargo"    || install_rustup
is_exists "delta"    || install_delta

is_exists "fzf"      || webi_update_or_install fzf
is_exists "zoxide"   || webi_update_or_install zoxide
is_exists "starship" || update_or_install_starship

#==============
# Link common config
#==============
symlink_config bash
symlink_config alacritty
symlink_config starship
symlink_config zoxide
symlink_config git
symlink_config helix

#==============
# Fonts
#==============
if [[ ! $(grep microsoft /proc/version) ]]; then
    if ! fc-list | grep -q Iosevka; then
        write_pending "installing Isosvka font"
        mkdir -p "$HOME/.fonts/Iosevka"
        curl -soL "https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Iosevka.zip" | bsdtar -C "$HOME/.fonts/Iosevka" -xf-
        sudo fc-cache -f > /dev/null
        write_done "installing Isosvka font"
    fi
fi


